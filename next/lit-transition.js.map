{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./src/core/class-list.ts","webpack:///./src/core/utils.ts","webpack:///./src/core/transition-base.ts","webpack:///./src/css/interfaces.ts","webpack:///./src/css/utils.ts","webpack:///./src/css/transitions/fade.ts","webpack:///./src/css/flow.ts","webpack:///./src/css/transitions/land.ts","webpack:///./src/css/transitions/slide.ts","webpack:///./src/css/index.ts","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/render.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","defaultTemplateProcessor","element","strings","options","prefix","slice","parts","eventContext","window","push","html","values","svg","marker","String","Math","random","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","this","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","length","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","nextSibling","pop","removeChild","str","suffix","isTemplatePartActive","part","createComment","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","undefined","v","setAttribute","_getValue","committer","directive","commit","NodePart","__pendingValue","container","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","template","templateFactory","update","instance","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","noChange","nothing","isCEPolyfill","customElements","polyfillWrapFlushCallback","reparentNodes","start","end","before","removeNodes","directives","WeakMap","f","args","set","isDirective","has","ClassList","classes","Set","classList","cls","add","delete","classString","forEach","forceClassList","parentElement","elem","host","HTMLElement","classChanged","cb","skipFrame","Promise","resolve","observer","MutationObserver","async","disconnect","nextFrame","requestAnimationFrame","observe","attributeFilter","markedTemplates","mark","templateResult","_visible","updatePageVisibility","visible","hidden","setup","transitionBase","flow","tr","transition","enter","leave","onEnter","onLeave","onAfterEnter","onAfterLeave","remove","last","enterFlow","leaveFlow","children","Map","styles","init","TransitionMode","GeometryLockMode","instantiateDefault","generator","inst","mergeObjects","obj1","obj2","constructor","opts","duration","ease","opacity","active","from","to","lock","css","global","dom","collected","partNodes","filter","nodeName","nodeValue","trim","map","a","join","partDomSingle","extents","Auto","activeClass","div","createElement","cl","root","shadowRoot","position","getComputedStyle","needsLock","rect","getBoundingClientRect","top","left","offsetParent","DocumentFragment","offsetTop","scrollTop","offsetLeft","scrollLeft","width","height","recordExtents","ext","done","target","preventDefault","stopPropagation","style","marginLeft","marginTop","setTimeout","_cssSource","right","up","down","simple","x","x1","y","y1","leavePosition","OutIn","Both","skipHidden","normalizeCSSTransitionOptions","commentMarker","TemplateResult","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","innerHTML","getHTML","SVGTemplateResult","getTemplateElement","svgElement","firstChild","templateCache","templateCaches","stringsArray","keyString","TemplateInstance","__parts","cloneNode","importNode","nodeIndex","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","render","assign","appendInto"],"mappings":"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","file":"lit-transition.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/lit-transition/next/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","// ripped from here: https://github.com/Polymer/lit-html/blob/master/src/directives/class-map.ts\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  element: Element;\n  classes: Set<string> = new Set();\n\n  constructor(element: Element) {\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls: string) {\n    this.classes.add(cls);\n    this.commit()\n  }\n\n  remove(cls: string) {\n    this.classes.delete(cls);\n    this.commit()\n  }\n\n  commit() {\n    let classString = '';\n    this.classes.forEach((cls) => classString += cls + ' ');\n    this.element.setAttribute('class', classString);\n  }\n}\n\nlet forceClassList:Boolean = false;\n\nexport default function(element:Element) {\n  return !forceClassList ?\n    (element.classList || new ClassList(element)) :\n      new ClassList(element) as DOMTokenList | ClassList;\n}\n\nexport function setForceClassList(force:Boolean) {\n  forceClassList = force;\n}","import {\n  NodePart,\n  TemplateResult\n} from 'lit-html';\nimport classList from './class-list';\n\nexport function nextFrame(n = 1):Promise<void> {\n  return new Promise(resolve => \n    --n === 0 ? requestAnimationFrame(() => resolve()) :\n      resolve(nextFrame(n)));\n}\n\n/**\n * get parent skipping over fragments\n * @param elem input element\n */\nfunction parentElement(elem:HTMLElement):HTMLElement|null {\n  let e = elem;\n  while(e = (e.parentNode || (e as any).host)) {\n    if(e instanceof HTMLElement) {\n      return e;\n    }\n  }\n  return null;\n}\n\n/**\n * resolves once the class attribute of a node\n * has been consolidated\n * @param node DOMNode\n */\nexport function classChanged(node:HTMLElement, cb:Function|null, skipFrame:Boolean = true) {\n  return new Promise(resolve => {\n    // Create an observer instance linked to the callback function\n    const observer = new MutationObserver(async () => {\n      // Later, you can stop observing\n      observer.disconnect();\n      skipFrame && await nextFrame();\n      resolve();\n    });\n    // Start observing the target node for configured mutations\n    observer.observe(node, {\n      attributes: true,\n      attributeFilter: [\"class\"]\n    });\n    cb && cb();\n  });\n}\n\n/**\n * returns true on ignore dom nodes\n * @param dom \n */\nfunction ignoredDom(dom:HTMLElement) {\n  return dom.nodeName === '#text' && !(dom.nodeValue?.trim());\n}\n\nfunction partNodes(part:NodePart) {\n  const collected = [];\n  let node:any = part.startNode.nextSibling;\n  while(node !== part.endNode) {\n    collected.push(node);\n    node = node.nextSibling;\n  }\n  return collected;\n} \n\nexport function partDomSingle(part:NodePart):any {\n  let nodes:Array<any> = partNodes(part);\n  let active = nodes.filter(d => !ignoredDom(d));\n  // check part has a shape we accept\n  // (i.e. only one non-text node)\n  if(active.length != 1) {\n    throw new Error(\n      `lit-transition directive expects exactly one child node,\n      but was passed ${active.map(a => a.nodeName).join(', ')}`)\n  }\n  return active[0];\n}\n\n/**\n * marked templates are kept in a global weak map\n */\nconst markedTemplates = new WeakMap<TemplateResult,String>();\nexport function mark(templateResult:TemplateResult, name:String) {\n  markedTemplates.set(templateResult, name);\n  return templateResult;\n}\n\nexport function marked(templateResult:TemplateResult) {\n  return markedTemplates.get(templateResult);\n}\n\n/**\n * tries to figure out if the geometry of an object\n * should be locked. will return true if e will have\n * position: absolute and parent has position: relative;\n * @param e element\n * @param activeCass className that would be applied\n */\nexport function needsLock(e:HTMLElement, activeClass:string) {\n  const parent = parentElement(e);\n  if(parent) {\n    // createa a div with active class to peek if\n    // it will be positioned relatively;\n    const position = (() => {\n      const div = document.createElement('div');\n      const cl = classList(div);\n      // remove not needed since we detach child alltogether\n      const add = (c:any) => Array.isArray(c) ?\n        c.forEach((i:string) => cl.add(i)) : cl.add(c);\n      // use shadowRoot for peeking if available!\n      const root = parent.shadowRoot || parent;\n      add(activeClass);\n      root.appendChild(div);\n      const style = window.getComputedStyle(div);\n      const position = style.position;\n      // peeking done remove child\n      root.removeChild(div);\n      return position;\n    })()\n    if(position === 'absolute') {\n      const style = window.getComputedStyle(parent);\n      return style.position === 'relative';\n    }\n  }\n  return false;\n}\n\n/**\n * records geometry of a dom node so it can\n * be reaplied later on\n */\nexport function recordExtents(e:any) {\n  const rect = e.getBoundingClientRect();\n  // // we separately track margins\n  // // so in case the changed when the extents\n  // // are reapplied (like when a fixed margin is used)\n  // // we can compensate\n  // const style = window.getComputedStyle(e);\n  // const marginTop = parseFloat(style.marginTop) || 0;\n  // const marginLeft = parseFloat(style.marginLeft) || 0;\n  let top = 0; //-marginTop;\n  let left = 0; // -marginLeft;\n  {\n    let offsetParent:Element|null = e.offsetParent;\n    while(e && e !== document && !(e instanceof DocumentFragment)) {\n      if(e === offsetParent) {\n        break;\n      }\n      // not accounting for margins here\n      // since in case of margin: auto, offset\n      // may actually be the auto margin\n      // const style = window.getComputedStyle(e);\n      top += e.offsetTop - (e.scrollTop || 0);\n      left += e.offsetLeft - (e.scrollLeft || 0);\n      e = parentElement(e);\n    } \n  }\n  return {\n    left,\n    top,\n    width: rect.width,\n    height: rect.height\n  }\n}\n\n/**\n * applies left,top,width and height form ext\n * also sets marginLeft+Top to 0\n * @param e HTMLElement to apply extents to\n * @param ext extents object\n */\nexport function applyExtents(e:HTMLElement, ext:any) {\n  e.style.marginLeft = '0px';\n  e.style.marginTop = '0px';\n  e.style.left = (ext.left) + 'px';\n  e.style.top = (ext.top) + 'px';\n  e.style.width = (ext.width) + 'px';\n  e.style.height = (ext.height) + 'px';\n}\n\n\nlet _visible:Boolean;\nfunction updatePageVisibility(visible = !document.hidden){\n  _visible = visible;\n}\nupdatePageVisibility();\ndocument.addEventListener('visibilitychange', () => updatePageVisibility(), false);\n  \nexport function pageVisible():Boolean {\n  return _visible;\n}","import {\n  NodePart,\n  TemplateResult,\n  html\n} from 'lit-html';\nimport {\n  marked,\n  pageVisible\n} from './utils'\n\nconst setup = new WeakMap();\n\n// generates a directive\nexport function transitionBase(flow:any) {\n  // generated directive\n  return function _transition(tr:TemplateResult|any, transition : any) {\n    return async (container:NodePart) => {\n      if (!(container instanceof NodePart)) {\n        throw new Error('The `transition` directive can only be used on nodes');\n      }\n\n      // skip empty templates\n      if(!tr) {\n        tr = html`<div></div>`;\n      }\n\n      if(typeof tr === 'string' || typeof tr === 'number') {\n        tr = html`<div style=\"display: inline-block\">${tr}</div>`;\n      }\n\n      // see if template was marked\n      // the name is used to decide if consider\n      // an animation to have happened\n      const name = marked(tr);\n\n      const {\n        enter,\n        leave,\n        onEnter,\n        onLeave,\n        onAfterEnter,\n        onAfterLeave,\n        mode = 'in-out'\n      } = transition;\n\n      // data is used to store some state data\n      // per container\n      let data = setup.get(container);\n      \n      // adds new template result\n      function add(e:TemplateResult) {\n        const part = new NodePart(container.options);\n        part.appendIntoPart(container);\n        part.setValue(e);\n        part.commit();\n        return part;\n      }\n  \n      // removes a template result\n      function remove(part:NodePart) {\n        const {startNode:s, endNode:e} = part;\n        try {\n          s && part.clear();\n        } catch(e) {\n          // TODO: why does this happen?\n          // out-in seems to have a bug..\n        }\n        s && s.parentNode && s.parentNode.removeChild(s);\n        e && e.parentNode && e.parentNode.removeChild(e);\n      }\n\n      // in case the page is not visible\n      // we skip all animations but still call the\n      // corresponding hooks to stay transparent\n      // in regards to app logic\n      if(!pageVisible()) {\n        data && data.last && remove(data.last);\n        // simply update dom and call hooks\n        onLeave && await onLeave();\n        onAfterLeave && await onAfterLeave();\n        onEnter && await onEnter();\n        data && (data.last = add(tr));\n        onAfterEnter && await onAfterEnter();\n        return;\n      }\n  \n      // perform enter transition\n      async function enterFlow(part:NodePart) {\n        // first mount element\n        onEnter && await onEnter();\n        enter && await flow.transition(part, enter, transition);\n        onAfterEnter && await onAfterEnter();\n      }\n  \n      // perform enter transition\n      async function leaveFlow(part:NodePart) {\n        onLeave && await onLeave();\n        leave && await flow.transition(part, leave, transition);\n        remove(part);\n        onAfterLeave && await onAfterLeave();\n      }\n  \n      // init container\n      if(!data) {\n        setup.set(container, data = {\n          children: new Map<TemplateResult, NodePart>(),\n          styles: new Map<TemplateResult, NodePart>(),\n          transition\n        });\n      }\n\n      // important in case transition has changed\n      // init flow, like to init css\n      // init must be laze\n      flow.init && flow.init({\n        transition,\n        data,\n        add,\n        remove\n      })\n\n      // same template? no animation! \n      if(data.last && !!name && name === data.name) {\n        // simply commit\n        data.last.setValue(tr);\n        data.last.commit();\n      } else {\n        // remember what template we are currently showing\n        data.name = name;\n        \n        // execute actual flow\n        if(mode === 'in-out') {\n          const last = data.last;\n          await enterFlow(data.last = add(tr));\n          last && await leaveFlow(last);\n        } else if(mode === 'out-in') {\n          // in this case we wait for leave\n          // to finish before we enter\n          const last = data.last;\n          // delete data.last;\n          last && await leaveFlow(last);\n          // trigger enter and remember part\n          // it will be pased to leaveFlow\n          // on the next transition\n          await enterFlow(data.last = add(tr));\n        } else {\n          // mode === 'both'\n          // here we don't wait so we trigger enter\n          // and leave right away\n          data.last && leaveFlow(data.last),\n          // trigger enter and remember part\n          // it will be pased to leaveFlow\n          // on the next transition\n          await enterFlow(data.last = add(tr));\n        }\n      }\n    }\n  }  \n}\n","import {\n  TemplateResult\n} from 'lit-html';\n\n/**\n * in-out: enter transition starts playing right away\n * out-in: enter transition only plays after leave completed\n * both: both transitions play immediately\n */\nexport enum TransitionMode {\n  InOut = \"in-out\",\n  OutIn = \"out-in\",\n  Both = \"both\"\n}\n\n/**\n * in-out: enter transition starts playing right away\n * out-in: enter transition only plays after leave completed\n * both: both transitions play immediately\n */\nexport enum GeometryLockMode {\n  None = 0,\n  Lock = 1,\n  Auto = 'auto',\n}\n\nexport interface CSSClassSequence {\n  // class applied throughout whole transition\n  active?: string\n  // class with initial props applied on first frame\n  from?: string\n  // class with target props applied after first frame\n  to?: string,\n  // lock behavior\n  lock?: GeometryLockMode\n}\n\nexport interface CSSTransitionOptions {\n  // css string\n  css?: TemplateResult|string|null\n  duration?: Number\n  enter?: CSSClassSequence|Boolean\n  leave?: CSSClassSequence|Boolean\n  mode?: TransitionMode\n  skipHidden?: Boolean\n  onEnter?: Function\n  onLeave?: Function\n  onAfterEnter?: Function\n  onAfterLeave?: Function\n}\n\nexport type CSSTransitionOptionsGenerator\n  = (opts?:any) => CSSTransitionOptions;\n","import {\n  html\n} from 'lit-html';\n\nimport {\n  CSSTransitionOptions,\n  TransitionMode\n} from './interfaces';\n\n/**\n * takes an object and normalizes it into CSSTransitionOptions\n * by padding it with defaults etc..\n */\nexport function normalizeCSSTransitionOptions(opts : any = {}): CSSTransitionOptions {\n  const {\n    css,\n    duration,\n    enter={},\n    leave={},\n    mode = TransitionMode.Both,\n    onAfterEnter,\n    onAfterLeave,\n    onEnter,\n    onLeave,\n    skipHidden = true\n  } = opts;\n\n  // don't do it by default, it might confuse\n  const lock = false; //mode !== TransitionMode.Both;\n  return {\n    duration,\n    skipHidden,\n    css: html`<style>${css}</style>`,\n    enter: enter != false ? (Array.isArray(enter)||typeof enter === 'string' ? {\n        active: enter,\n      } : {\n        active: 'enter-active',\n        from: 'enter-from',\n        to: 'enter-to',\n        ...enter\n      }) : false,\n    leave: leave != false ? (Array.isArray(leave)||typeof leave === 'string' ? {\n        active: leave,\n        lock\n      } : {\n        active: 'leave-active',\n        from: 'leave-from',\n        to: 'leave-to',\n        lock,\n        ...leave\n      } ): false,\n    onEnter,\n    onLeave,\n    onAfterEnter,\n    onAfterLeave,\n    mode\n  }\n}\n\n\nexport function instantiateDefault(name:string, generator:any) {\n  // create default instance\n  const inst = generator();\n  // patch generator with default instance\n  for(let p in inst) {\n    generator[p] = inst[p];\n  }\n  Object.defineProperty(generator, 'name', {\n    get() {\n      return name;\n    }\n  })\n  return generator;\n}\n\n/*\n* avoiding lodash for now\n*/\nexport function mergeObjects(obj1:any, obj2:any) {\n  for (var p in obj2) {\n    try {\n      // Property in destination object set; update its value.\n      if ( obj2[p].constructor==Object ) {\n        obj1[p] = mergeObjects(obj1[p], obj2[p]);\n      } else {\n        obj1[p] = obj2[p];\n      }\n    } catch(e) {\n      obj1[p] = obj2[p];\n    }\n  }\n  return obj1;\n}","import { CSSTransitionOptions } from '../interfaces';\nimport { instantiateDefault, mergeObjects } from '../utils';\n\ninterface CSSFadeOptions extends CSSTransitionOptions  {\n  // duration in ms (default: 500 )\n  duration?: number\n  // css easing options (default: ease-out)\n  ease?: string,\n  // opactiy to fade from and to (default: 0)\n  opacity?: number\n}\n\nexport const fade = instantiateDefault('fade',\n  function fade(opts:CSSFadeOptions = {}) {\n  const {\n    duration = 500,\n    ease = 'ease-out',\n    opacity = 0.0\n  } = opts;\n  return mergeObjects({\n    enter: {\n      active: 'fade-enter-active',\n      from: 'fade-enter-from',\n      to: 'fade-enter-to',\n    },\n    leave: {\n      active: 'fade-leave-active',\n      from:  'fade-leave-from',\n      to: 'fade-leave-to',\n      lock: true\n    },\n    css: `\n    .fade-leave-active {\n      position: fixed;\n      transition: opacity ${duration}ms ${ease}, transform ${duration}ms ${ease};\n    }\n    .fade-enter-active {\n      transition: opacity ${duration}ms ${ease}, transform ${duration}ms ${ease};\n    }\n  .fade-enter-from, .fade-leave-to {\n    opacity: ${opacity};\n  }\n  .fade-enter-to, .fade-leave-from {\n    opacity: 1;\n  }\n  `,\n  }, opts)\n});","import {\n  NodePart,\n  html\n} from 'lit-html';\nimport classList from '../core/class-list';\nimport {\n  partDomSingle,\n  applyExtents,\n  recordExtents,\n  classChanged,\n  needsLock\n} from '../core/utils';\nimport {\n  GeometryLockMode\n} from './interfaces'\n \n/**\n * schedules css transitons\n * @param part NodePart that is to be rendered\n * @param classes classes to be applied as part of css flow\n * @param global global params to be merged with flow-specific params\n */\nexport const flow = {\n  async transition(part:NodePart, classes:any, global: any) {\n    // destructure params\n    const {\n      duration = global.duration,\n      active,\n      from,\n      to,\n      lock\n    } = classes;\n\n    // will throw if dom does not expose exactly one\n    // non-text node\n    const dom = partDomSingle(part);\n\n    if(!dom) {\n      // animation was cancelled?\n      return;\n    }\n    //const parent = dom.parentNode;\n    let extents: any;\n    if(lock) {\n      if(lock !== GeometryLockMode.Auto|| active && needsLock(dom, active)) {\n        extents = recordExtents(dom);\n      }\n    }\n    await new Promise(async resolve => {\n      const cl = classList(dom);\n      const add = (c:Array<string>) => Array.isArray(c) ?\n        c.forEach((i:string) => cl.add(i)) : cl.add(c);\n      const remove = (c:Array<string>) => Array.isArray(c) ?\n        c.forEach((i:string) => cl.remove(i)) : cl.remove(c);\n\n      // in this case we apply a previously recorded\n      // geometry\n      if(extents) {\n        applyExtents(dom, extents);\n      }\n\n      // called once transition is completed\n      function done(e:Event) {\n        if(e) {\n          // if e is set we have an actual event\n          if(e.target !== dom) {\n            // bubbled up from someone else, ignore..\n            return;\n          }\n          // this event was meant for us\n          // we handle it definitively\n          e.preventDefault();\n          e.stopPropagation();\n        } \n\n        // Remove all the other excess hooks\n        ['transitionend','transitioncancel'\n        ,'animationend','animationcancel']\n        .filter(type => !e || type !== e.type)\n        .forEach(type => dom.removeEventListener(type, done));\n\n        // remove all classes we added and resolve\n        active && remove(active);\n        from && remove(from);\n        to && remove(to);\n        resolve();\n      }\n      \n      // Register these hooks before we set the css\n      // class es that will trigger animations\n      // or transitions\n      const o = {once:true};\n      if(duration) {\n        setTimeout(done, duration);\n      } else {\n        dom.addEventListener('transitionrun', function() {\n          dom.addEventListener('transitionend', done, o);\n          dom.addEventListener('transitioncancel', done, o);\n        }, o);\n        dom.addEventListener('animationstart', function() {\n          dom.addEventListener('animationend', done, o);\n          dom.addEventListener('animationcancel', done, o);\n        }, o);\n      }\n\n      // add actual transition classes\n      from && await classChanged(dom, () => add(from));\n      active && await classChanged(dom, () => add(active));\n\n      from && remove(from);\n      to && add(to);\n    });\n  },\n  // injects style tags\n  init({data,remove,add,transition}:{data:any,remove:any,add:any,transition:any}) {\n    if(data._cssSource !== transition.css) {\n      data.css && remove(data.css);\n      if(!!transition.css) {\n      // only init css if it has changed!\n      data._cssSource = transition.css;\n      let css = transition.css;\n      css = typeof css === 'string' ? html`<style>${css}</style>`: css;\n      data.css = add(css);\n      }\n    }\n  }\n};","import { CSSTransitionOptions } from '../interfaces';\nimport { instantiateDefault, mergeObjects } from '../utils';\n\ninterface CSSLandOptions extends CSSTransitionOptions  {\n  // duration in ms (default: 500 )\n  duration?: number\n  // css easing options (default: ease-out)\n  ease?: string,\n  // opactiy to fade from and to (default: 0)\n  opacity?: number\n}\n\nexport const land = instantiateDefault('land',\n  function land(opts:CSSLandOptions = {}) {\n    const {\n      duration = 500,\n      ease = 'ease-out',\n      opacity = 0\n    } = opts;\n    return mergeObjects({\n      enter: {\n        active: 'land1-enter-active',\n        from: 'land1-enter-from',\n        to: 'land1-enter-to',\n      },\n      leave: {\n        active: 'land1-leave-active',\n        from:  'land1-leave-from',\n        to: 'land1-leave-to'\n      },\n      mode: 'both',\n      css:`\n      .land1-enter-active {\n        transform-origin: 50% 50%;\n        transition: transform ${duration}ms ${ease}, opacity ${duration}ms ${ease};\n      }\n      .land1-leave-active {\n        transform-origin: 50% 50%;\n        position: absolute;\n        transition: transform ${duration}ms ${ease}, opacity ${duration}ms ${ease};\n      }\n      .land1-enter-from {\n        opacity: ${opacity};\n        transform: translate(0px, 0px) scale(3);\n      }\n      .land1-leave-to {\n        transform: translate(0px, 100px);\n        opacity: ${opacity};\n      }`,\n    }, opts)\n  });","import {\n  CSSTransitionOptions,\n  TransitionMode,\n  GeometryLockMode\n} from '../interfaces';\nimport {\n  instantiateDefault,\n  mergeObjects\n} from '../utils';\n\ninterface CSSSlideOptions extends CSSTransitionOptions  {\n  // easing options (default: ease-out)\n  ease?: string\n  // opacity at start of animation (default: 0)\n  opacity?: number\n  // duration in ms (default: 500)\n  duration?: number\n  // force positioning (default: undefined)\n  leavePosition?: string\n  // slide to left (default: false)\n  left?:Boolean\n  // slide to right (default: false)\n  right?:Boolean\n  // slide to up (default: false)\n  up?:Boolean\n  // slide to down (default: false)\n  down?:Boolean\n  // slide out target x (default: 100%)\n  x?: string\n  // slide out target y (default: 0%)\n  y?: string\n  // slide in start x (default: same as x)\n  x1?: string\n  // slide in start y (default: same as y)\n  y1?: string\n}\n\n/**\n * simple slide transition\n * TODO\n */\nexport const slide = instantiateDefault('slide',\n  function slide(opts:CSSSlideOptions = {}) {\n    const {left,right,up,down} = opts;\n    let simple = {};\n    left && (simple = {\n      x:'-100%',  // slide out to right ..\n      x1:'100%' // .. and in from left\n    });\n    right && (simple = {\n      x:'100%',  // slide out to right ..\n      x1:'-100%' // .. and in from left\n    });\n    up && (simple = {\n      y:'100%',  // slide out to right ..\n      y1:'-100%' // .. and in from left\n    });\n    down && (simple = {\n      y:'-100%',  // slide out to right ..\n      y1:'100%' // .. and in from left\n    });\n    let {\n      mode,\n      duration = 500,\n      x = '100%',\n      y = '0%',\n      x1 = '',\n      y1 = '',\n      ease = 'ease-out',\n      leavePosition = '',\n      opacity = 0.0,\n    } = {\n      ...simple,\n      ...opts\n    };\n    x1 = x1 || x;\n    y1 = y1 || y;\n    return mergeObjects({\n      enter: {\n        active: 'slide-enter-active',\n        from: 'slide-enter-from'\n      },\n      leave: {\n        active: 'slide-leave-active',\n        to: 'slide-leave-to',\n        lock: GeometryLockMode.Auto\n      },\n      css:`\n    .slide-enter-active {\n      transition: transform ${duration}ms ${ease}, opacity ${duration}ms ${ease};\n    }\n    .slide-leave-active {\n      position: ${leavePosition\n        || (mode !== TransitionMode.OutIn ? 'absolute': 'initial')};\n      transition: transform ${duration}ms ${ease}, opacity ${duration}ms ${ease};\n    }\n    .slide-leave-to {\n      opacity: ${opacity};\n      transform: translate(${x}, ${y});\n    }\n    .slide-enter-from {\n      opacity: ${opacity};\n      transform: translate(${x1}, ${y1});\n    }`,\n    mode\n  }, opts)\n})","import { directive } from 'lit-html';\nimport { transitionBase } from '../core/transition-base';\nimport { fade as defaultTransition } from './transitions/fade';\nimport { normalizeCSSTransitionOptions } from './utils';\nimport { flow } from './flow';\nimport {\n  CSSTransitionOptions,\n  CSSTransitionOptionsGenerator\n} from './interfaces';\n\n/**\n * re-export interfaces\n */ \nexport * from './interfaces';\n\n/**\n * re-export predefined transitions\n */ \nexport * from './transitions';\n\n/**\n * re-export mark\n */ \nexport {mark} from '../core/utils';\n\n/**\n * this is the actual directive\n */\nexport const transition = directive(function(\n    elem:any,\n    opts:CSSTransitionOptionsGenerator | CSSTransitionOptions = defaultTransition\n    ) {\n    if(typeof opts === 'function') {\n      opts = opts();\n    }\n  return transitionBase(flow)(\n    elem,\n    normalizeCSSTransitionOptions(opts)\n  );\n});\n\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map"],"sourceRoot":""}